"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bootstrap = bootstrap;

var _chalk = _interopRequireDefault(require("chalk"));

var _execa = _interopRequireDefault(require("execa"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _ora = _interopRequireDefault(require("ora"));

var _prettyError = _interopRequireDefault(require("pretty-error"));

var _Bootstrap = require("../scripts/Bootstrap");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function bootstrap(options, version) {
  // For error handling
  const pe = new _prettyError.default();
  const cwd = (0, _utils.resolveCWD)(options);
  console.log(`ðŸ“¦ bootstraping ${_utils.wpackLogoSmall} into your project`);

  try {
    const initiator = new _Bootstrap.Bootstrap(cwd, version);

    try {
      const done = await initiator.bootstrap();

      if (done.configured === 'project') {
        console.log(`${_logSymbols.default.success} ${_utils.wpackLogoSmall} bootstrap complete!`);
        console.log(`${_logSymbols.default.success} project config created at ${_chalk.default.yellow('./wpackio.project.js')}`);
      } else {
        console.log(`${_logSymbols.default.success} server configuration complete!`);
      }

      console.log(`${_logSymbols.default.success} server config created at ${_chalk.default.yellow('./wpackio.server.js')}`); // Install all dependencies from `done` if any

      const command = (0, _utils.isYarn)() ? 'yarn' : 'npm';
      const add = (0, _utils.isYarn)() ? 'add' : 'i';
      const devParam = (0, _utils.isYarn)() ? '--dev' : '-D';
      const spinner = (0, _ora.default)({
        spinner: 'dots3'
      });

      if (done.deps && done.deps.dependencies.length) {
        console.log(`${_logSymbols.default.info} need to install following ${_chalk.default.yellow('dependencies')}\n`);
        console.log(`    ${_utils.bulletSymbol} ${_chalk.default.yellow(done.deps.dependencies.join(', '))}\n`);
        spinner.start(`installing dependencies${_utils.watchEllipsis} may take a while`);

        try {
          await (0, _execa.default)(command, [add, ...done.deps.dependencies]);
          spinner.succeed('done installing dependencies\n');
        } catch (e) {
          spinner.fail('could not install all dependencies');
          console.log(pe.render(e));
        }
      }

      if (done.deps && done.deps.devDependencies.length) {
        console.log(`${_logSymbols.default.info} need to install following ${_chalk.default.yellow('dev dependencies')}\n`);
        console.log(`    ${_utils.bulletSymbol} ${_chalk.default.green(done.deps.devDependencies.join(', '))}\n`);
        spinner.start(`installing dev dependencies${_utils.watchEllipsis} may take a while`);

        try {
          await (0, _execa.default)(command, [add, ...done.deps.devDependencies, devParam]);
          spinner.succeed('done installing devDependencies\n');
        } catch (e) {
          spinner.fail('could not install all devDependencies');
          console.log(pe.render(e));
        }
      }
    } catch (e) {
      console.log(`${_logSymbols.default.error} configuration files are already present.`);
      console.log(`${_logSymbols.default.info} change the file code if you wish to modify the tooling.`);
    } // Log how to access and start, develop, build etc.


    console.log('');
    (0, _utils.endBootstrapInfo)();
    console.log('');
  } catch (e) {
    console.log(pe.render(e));
  }
}