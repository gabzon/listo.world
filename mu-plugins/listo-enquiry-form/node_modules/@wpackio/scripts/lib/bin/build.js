"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.build = build;

var _chalk = _interopRequireDefault(require("chalk"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _ora = _interopRequireDefault(require("ora"));

var _path = _interopRequireDefault(require("path"));

var _getProjectAndServerConfig = require("../config/getProjectAndServerConfig");

var _Build = require("../scripts/Build");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Start the `wpackio-scripts build` command.
 *
 * @param options Option as received from CLI.
 */
function build(options) {
  // For spinner
  const spinner = (0, _ora.default)({
    text: `${_utils.wpackLogoSmall}: creating production builds${_utils.watchEllipsis}`,
    spinner: 'dots',
    color: 'yellow'
  }); // Set process.env.NODE_ENV to production

  process.env.NODE_ENV = 'production'; // Set process.env.BABEL_ENV to production

  process.env.BABEL_ENV = 'production'; // Get project and server config JSONs.

  const cwd = (0, _utils.resolveCWD)(options);

  const relCwd = _path.default.relative(process.cwd(), cwd);

  console.log(`${_logSymbols.default.success} startup: ${_chalk.default.cyan(relCwd === '' ? '.' : relCwd)}`);

  try {
    const {
      projectConfig,
      projectConfigPath
    } = (0, _getProjectAndServerConfig.getProjectConfig)(cwd, options);
    console.log(`${_logSymbols.default.success} project config: ${_chalk.default.cyan(_path.default.relative(cwd, projectConfigPath))}`); // Start the webpack/browserSync server

    spinner.start();
    const builder = new _Build.Build(projectConfig, cwd);
    builder.build().then(({
      status,
      log,
      warnings
    }) => {
      if (status === 'success') {
        spinner.succeed(`${_utils.wpackLogoSmall} build successful.`);
      } else {
        spinner.warn(`${_utils.wpackLogoSmall} built with warnings.`);
      }

      (0, _utils.printSuccessHeading)('OUTPUT');
      console.log(log);
      console.log('');

      if (status === 'warn' && Array.isArray(warnings)) {
        (0, _utils.printWarningHeading)('WARNINGS');
        warnings.forEach(w => {
          console.log(w);
          console.log('');
        });
      }

      (0, _utils.endBuildInfo)();
      console.log('');
      process.exit(0);
    }).catch(err => {
      spinner.fail(`${_utils.wpackLogoSmall} build failed.`);
      (0, _utils.printErrorHeading)('ERROR');
      console.error(err);
      console.log('');
      process.exit(1);
    });
  } catch (e) {
    spinner.stop();
    (0, _utils.prettyPrintError)(e, 'could not start webpack compiler.');
    process.exit(1);
  }
}