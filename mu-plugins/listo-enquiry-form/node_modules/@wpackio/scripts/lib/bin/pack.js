"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pack = pack;

var _chalk = _interopRequireDefault(require("chalk"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _ora = _interopRequireDefault(require("ora"));

var _path = _interopRequireDefault(require("path"));

var _getProjectAndServerConfig = require("../config/getProjectAndServerConfig");

var _Pack = require("../scripts/Pack");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Start the `wpackio-scripts build` command.
 *
 * @param options Option as received from CLI.
 */
function pack(options) {
  // For spinner
  const spinText = `${_utils.wpackLogoSmall}: creating distributable zip file${_utils.watchEllipsis}`;
  const spinner = (0, _ora.default)({
    text: spinText,
    spinner: 'dots',
    color: 'yellow'
  }); // Get project and server config JSONs.

  const cwd = (0, _utils.resolveCWD)(options);

  const relCwd = _path.default.relative(process.cwd(), cwd);

  console.log(`${_logSymbols.default.success} startup: ${_chalk.default.cyan(relCwd === '' ? '.' : relCwd)}`);

  try {
    const {
      projectConfig,
      projectConfigPath
    } = (0, _getProjectAndServerConfig.getProjectConfig)(cwd, options);
    console.log(`${_logSymbols.default.success} project config: ${_chalk.default.cyan(_path.default.relative(cwd, projectConfigPath))}`); // Start the webpack/browserSync server

    spinner.start();
    const packer = new _Pack.Pack(projectConfig, {
      onMkDirPackage: p => {
        spinner.succeed(`created directory ${_path.default.relative(cwd, p)}`);
        spinner.start(`cleaning up package directory`);
      },
      onClean: paths => {
        let sucText = `package directory is already clean`;

        if (paths.length) {
          sucText = `deleted ${paths.length} old files`;
        }

        spinner.succeed(sucText);
        spinner.start(`creating installable package directory`);
      },
      onMkDirSlug: p => {
        spinner.succeed(`created package directory ${_path.default.relative(cwd, p)}`);
        spinner.start(`copying files to installable package directory`);
      },
      onBeforeCopy: () => {
        spinner.text = (0, _utils.getFileCopyProgress)();
      },
      onCopyProgress: progress => {
        spinner.text = (0, _utils.getFileCopyProgress)(progress);
      },
      onCopy: () => {
        spinner.succeed();
      },
      onBeforeZip: () => {
        spinner.start((0, _utils.getZipProgress)());
      },
      onZipProgress: data => {
        spinner.text = (0, _utils.getZipProgress)(data);
      },
      onZip: result => {
        spinner.succeed();
        console.log('');
        (0, _utils.endPackInfo)(result);
        console.log('');
      }
    }, cwd);
    packer.pack();
  } catch (e) {
    spinner.stop();
    (0, _utils.prettyPrintError)(e, 'could not start webpack compiler.');
    process.exit(1);
  }
}