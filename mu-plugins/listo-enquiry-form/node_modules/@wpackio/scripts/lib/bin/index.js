#!/usr/bin/env node
"use strict";

var _chalk = _interopRequireDefault(require("chalk"));

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

var _clearConsole = _interopRequireDefault(require("react-dev-utils/clearConsole"));

var _updateNotifier = _interopRequireDefault(require("update-notifier"));

var _bootstrap = require("./bootstrap");

var _build = require("./build");

var _pack = require("./pack");

var _serve = require("./serve");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let isValidCommand = false; // eslint-disable-next-line global-require

const pkg = require('../../package.json'); // Notify for updates


(0, _updateNotifier.default)({
  pkg
}).notify(); // Declare version and stuff

_commander.default.version(pkg.version).description('Start the development server or create production builds.').usage('command [options]');

_commander.default.on('--help', () => {
  console.log('');
  console.log(_chalk.default.cyan.bold('Examples:'));
  console.log('');
  console.log('  %s start -p /path/to/wpackio.project.js', _path.default.basename(process.argv[1]));
  console.log('  %s build -c /path/to/project/root', _path.default.basename(process.argv[1]));
  console.log('');
  console.log(_chalk.default.cyan.bold('Bootstrap/Onboarding:'));
  console.log(`If you are just starting out with wpackio-scripts, then run

    ${_utils.bulletSymbol} ${_chalk.default.yellow('npx @wpackio/scripts bootstrap')}

If you already have the project config file and would like to configure
local server for this machine, then run

    ${_utils.bulletSymbol} ${_chalk.default.yellow('npm run bootstrap')}
            OR
    ${_utils.bulletSymbol} ${_chalk.default.yellow('yarn bootstrap')}

Remember to always keep local server config out of VCS,
because it would differ for team members.
	`);
}); // Commands
// Start the server


_commander.default.command('start').description('Start the development server.').option('-c, --context [path]', _utils.contextHelp).option('-p, --project-config [path]', 'Path to project config. If it differs from ./wpackio.project.js').option('-s, --server-config [path]', 'Path to server config. If it differs from ./wpackio.server.js').action(options => {
  isValidCommand = true;
  (0, _serve.serve)(options);
}); // Build the script


_commander.default.command('build').description('Build production files.').option('-c, --context [path]', _utils.contextHelp).option('-p, --project-config [path]', 'Path to project config. If it differs from ./wpackio.project.js').option('-s, --server-config [path]', 'Path to server config. If it differs from ./wpackio.server.js').action(options => {
  isValidCommand = true;
  (0, _build.build)(options);
}); // Pack the script


_commander.default.command('pack').description('Create distributable archive (.zip) file.').option('-c, --context [path]', _utils.contextHelp).option('-p, --project-config [path]', 'Path to project config. If it differs from ./wpackio.project.js').option('-s, --server-config [path]', 'Path to server config. If it differs from ./wpackio.server.js').action(options => {
  isValidCommand = true;
  (0, _pack.pack)(options);
}); // Init the project


_commander.default.command('bootstrap').description('create project and/or server configuration files.').option('-c, --context [path]', _utils.contextHelp).action(options => {
  isValidCommand = true;
  (0, _bootstrap.bootstrap)(options, pkg.version);
}); // Output our fancy stuff first


(0, _clearConsole.default)();
(0, _utils.printIntro)(); // Init

_commander.default.parse(process.argv); // error on unknown commands


if (!isValidCommand) {
  console.error('Invalid command: %s\nSee usage below.\n\n', _commander.default.args.join(' '));

  _commander.default.help();
}