"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pack = void 0;

var _archiver = _interopRequireDefault(require("archiver"));

var _cpy = _interopRequireDefault(require("cpy"));

var _del = _interopRequireDefault(require("del"));

var _fs = _interopRequireDefault(require("fs"));

var _makeDir = _interopRequireDefault(require("make-dir"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Pack {
  constructor(projectConfig, callbacks, cwd) {
    _defineProperty(this, "projectConfig", void 0);

    _defineProperty(this, "packageSlugPath", void 0);

    _defineProperty(this, "packageDirPath", void 0);

    _defineProperty(this, "packageZipPath", void 0);

    _defineProperty(this, "cwd", void 0);

    _defineProperty(this, "callbacks", void 0);

    this.projectConfig = projectConfig;
    this.cwd = cwd;
    this.callbacks = callbacks;
    this.packageDirPath = _path.default.resolve(this.cwd, projectConfig.packageDirPath);
    this.packageSlugPath = _path.default.resolve(this.cwd, this.packageDirPath, projectConfig.slug);
    this.packageZipPath = _path.default.resolve(this.cwd, this.packageDirPath, `${this.projectConfig.slug}.zip`);
  }

  async pack() {
    // First make the directory if needed
    const packagePath = await this.mkDirPackage();
    this.callbacks.onMkDirPackage(packagePath); // Clean up

    const cleanUps = await this.clean();
    this.callbacks.onClean(cleanUps); // Create copy to (slug) directory

    const slugPath = await this.mkDirPackageSlug();
    this.callbacks.onMkDirSlug(slugPath); // Copy files

    this.callbacks.onBeforeCopy();
    await this.copy();
    this.callbacks.onCopy(); // Zip

    this.callbacks.onBeforeZip();
    const result = await this.zip();
    this.callbacks.onZip(result);
  }

  async mkDirPackage() {
    return (0, _makeDir.default)(this.packageDirPath);
  }

  async clean() {
    return (0, _del.default)(`${this.packageDirPath}/**`);
  }

  async mkDirPackageSlug() {
    return (0, _makeDir.default)(this.packageSlugPath);
  }

  async copy() {
    return (0, _cpy.default)(this.projectConfig.packageFiles, this.packageSlugPath, {
      parents: true,
      cwd: this.cwd
    }).on('progress', this.callbacks.onCopyProgress);
  }

  async zip() {
    return new Promise((resolve, reject) => {
      // Create the stream
      const output = _fs.default.createWriteStream(this.packageZipPath); // Create archiver object


      const archive = (0, _archiver.default)('zip', {
        zlib: {
          level: this.projectConfig.zlibLevel
        }
      }); // Resolve when output is closed

      output.on('close', () => {
        resolve({
          size: archive.pointer(),
          path: `${this.packageZipPath}`,
          relPath: _path.default.relative(this.cwd, this.packageZipPath)
        });
      }); // Reject on blocking errors and warnings

      archive.on('error', err => {
        reject(err);
      }); // On Progress

      archive.on('progress', this.callbacks.onZipProgress); // Pipe archive to the file

      archive.pipe(output); // Append the directory

      archive.directory(`${this.packageSlugPath}/`, this.projectConfig.slug); // finalize

      archive.finalize();
    });
  }

}

exports.Pack = Pack;