"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Build = void 0;

var _formatWebpackMessages = _interopRequireDefault(require("react-dev-utils/formatWebpackMessages"));

var _webpack = _interopRequireDefault(require("webpack"));

var _CreateWebpackConfig = require("../config/CreateWebpackConfig");

var _serverConfig = require("../config/server.config.default");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Create production ready files.
 */
class Build {
  constructor(projectConfig, cwd) {
    _defineProperty(this, "projectConfig", void 0);

    _defineProperty(this, "cwd", void 0);

    this.projectConfig = projectConfig;
    this.cwd = cwd;
  }
  /**
   * Build the files.
   */


  build() {
    return new Promise((resolve, reject) => {
      const config = new _CreateWebpackConfig.CreateWebpackConfig(this.projectConfig, _serverConfig.serverConfigDefault, this.cwd, false);
      const compiler = (0, _webpack.default)(config.getWebpackConfig());
      compiler.run((err, stats) => {
        const raw = stats.toJson('verbose');
        const messages = (0, _formatWebpackMessages.default)(raw);
        const outputLog = stats.toString({
          colors: true,
          assets: true,
          chunks: false,
          entrypoints: false,
          hash: false,
          version: false,
          modules: false,
          builtAt: false,
          timings: false,
          warnings: false,
          errors: false
        });

        if (!messages.errors.length && !messages.warnings.length) {
          // All good
          resolve({
            status: 'success',
            log: outputLog
          });
        }

        if (messages.errors.length) {
          reject(messages.errors.join('\n\n'));
        }

        resolve({
          status: 'warn',
          log: outputLog,
          warnings: messages.warnings
        });
      });
    });
  }

}

exports.Build = Build;