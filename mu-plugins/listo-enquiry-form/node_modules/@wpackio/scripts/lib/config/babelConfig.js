"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultBabelPresetOptions = getDefaultBabelPresetOptions;
exports.overrideBabelPresetOptions = overrideBabelPresetOptions;
exports.getBabelPresets = getBabelPresets;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Get default options for @wpackio/babel-preset-base considering whether
 * project has react and whether it is in development mode.
 *
 * @param hasReact Whether to include react jsx transform.
 * @param isDev Whether in development mode or production mode.
 */
function getDefaultBabelPresetOptions(hasReact, isDev = false) {
  const defaultBabelOptions = {
    hasReact,
    presetEnv: {},
    presetReact: {}
  }; // Push targets to babel-preset-env if this is dev
  // We target only the latest chrome and firefox for
  // greater speed

  if (isDev) {
    defaultBabelOptions.presetEnv = {
      targets: {
        chrome: '69',
        firefox: '62',
        edge: '17'
      }
    };
  }

  return defaultBabelOptions;
}
/**
 * Get final options for @wpackio/babel-preset-base, combining both
 * system default and user defined value.
 *
 * @param defaults Default options for @wpackio/babel-preset-base.
 * @param options User defined options for @wpackio/babel-preset-base.
 */


function overrideBabelPresetOptions(defaults, options) {
  // If options is not undefined or null, then spread over it
  if (options !== undefined) {
    return _objectSpread({}, defaults, options);
  }

  return defaults;
} // We support only flow and typescript out of the box
// with babel


/**
 * Get Babel Presets for compiling JavaScript or TypeScript files.
 *
 * @param presetOptions Options for `@wpackio/base`.
 * @param typeChecker Whether to include preset for 'flow' or 'typescript'. Leave `undefined` to ignore both.
 */
function getBabelPresets(presetOptions, typeChecker) {
  const babelConfig = [['@wpackio/base', presetOptions]]; // If we have flow then push the preset

  if (typeChecker === 'flow') {
    babelConfig.push(['@babel/preset-flow']);
  } // If we have typescript, then push the preset


  if (typeChecker === 'typescript') {
    babelConfig.push(['@babel/preset-typescript']);
  }

  return babelConfig;
}