"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreateWebpackConfig = void 0;

var _webpackMerge = _interopRequireDefault(require("webpack-merge"));

var _projectConfig = require("./project.config.default");

var _serverConfig = require("./server.config.default");

var _WebpackConfigHelper = require("./WebpackConfigHelper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Create the final webpack config through this class.
 */
class CreateWebpackConfig {
  /**
   * Create an instance of GetWebpackConfig class.
   *
   * @param projectConfig Project configuration as recovered from user directory.
   * @param serverConfig Server configuration as recovered from user directory.
   * @param isDev Whether this is development mode.
   */
  constructor(projectConfig, serverConfig, cwd, isDev = true) {
    _defineProperty(this, "projectConfig", void 0);

    _defineProperty(this, "serverConfig", void 0);

    _defineProperty(this, "cwd", void 0);

    _defineProperty(this, "isDev", void 0);

    _defineProperty(this, "publicPath", void 0);

    // Create final configuration
    // By doing a shallow override
    this.projectConfig = _objectSpread({}, _projectConfig.projectConfigDefault, projectConfig);
    this.serverConfig = _objectSpread({}, _serverConfig.serverConfigDefault, serverConfig);
    this.cwd = cwd;
    this.isDev = isDev; // Also figure out the publicPath beforehand, because we do need it

    const {
      slug,
      outputPath,
      type
    } = this.projectConfig; // The public is generated automatically considering
    // the dev server is installed at root, and wp-content, themes, plugins
    // directories are all default.
    // But one can pass distPublicPath from serverConfig to override it.

    this.publicPath = this.serverConfig.distPublicPath || `/wp-content/${type}s/${slug}/${outputPath}/`;
  }
  /**
   * Get configuration object to feed to webpack.
   *
   * Depending on the project configuration, it could be for single compiler
   * as well as multi compiler.
   *
   * If `projectConfig.files` has length === 1, then it would be a single compiler
   * otherwise, it would be for multi compiler.
   */


  getWebpackConfig() {
    // Now it can be a single compiler, or multicompiler
    // In any case, figure it out, create the compiler options
    // and return the stuff.
    // If the configuration is for multiple compiler mode
    // Then return an array of config.
    if (this.isMultiCompiler()) {
      // Return an array of configuration
      const config = [];
      this.projectConfig.files.forEach(file => {
        config.push(this.getSingleWebpackConfig(file));
      });
      return config;
    } // Otherwise, just return a single compiler mode config


    return this.getSingleWebpackConfig(this.projectConfig.files[0]);
  }
  /**
   * Is the config going to be for multi-compiler?
   */


  isMultiCompiler() {
    return this.projectConfig.files.length > 1;
  }
  /**
   * Get devServer publicPath for all sorts of middlewares.
   */


  getPublicPath() {
    return this.publicPath;
  }
  /**
   * Get Hot Module Reload Path, which takes into consideration
   * the dynamicPublicPath.
   */


  getHmrPath() {
    return `${this.publicPath}__wpackio`;
  }
  /**
   * Get Url to publicPath.
   */


  getPublicPathUrl() {
    return `${this.getServerUrl()}${this.publicPath}`;
  }
  /**
   * Get server URL where the hot server is live and waiting to become
   * awesome.
   */


  getServerUrl() {
    const {
      host,
      port
    } = this.serverConfig;
    return `//${host || 'localhost'}:${port}`;
  }
  /**
   * Get Webpack Configuration for single compiler mode.
   *
   * @param file Single file object.
   */


  getSingleWebpackConfig(file) {
    const {
      type,
      slug,
      hasReact,
      hasSass,
      hasLess,
      hasFlow,
      bannerConfig,
      alias,
      optimizeSplitChunks,
      outputPath,
      appName,
      errorOverlay,
      externals,
      useBabelConfig
    } = this.projectConfig;
    const {
      host,
      port
    } = this.serverConfig;
    const helper = new _WebpackConfigHelper.WebpackConfigHelper(file, {
      appName,
      type,
      slug,
      host,
      port,
      hasReact,
      hasSass,
      hasLess,
      hasFlow,
      bannerConfig,
      alias,
      optimizeSplitChunks,
      outputPath,
      publicPath: this.getPublicPath(),
      publicPathUrl: this.getPublicPathUrl(),
      errorOverlay,
      externals,
      useBabelConfig
    }, this.cwd, this.isDev); // Now create the config and return it

    let config = _objectSpread({
      name: file.name,
      entry: helper.getEntry(),
      output: helper.getOutput(),
      module: helper.getModule(),
      plugins: helper.getPlugins(),
      resolve: helper.getResolve(),
      optimization: helper.getOptimization()
    }, helper.getCommon()); // Merge options if needed
    // Loose comparison because it could very well be undefined


    if (file.webpackConfig != null) {
      // If it is a function
      if (typeof file.webpackConfig === 'function') {
        config = file.webpackConfig(config, _webpackMerge.default, helper.getAppDir(), this.isDev);
      } else {
        config = (0, _webpackMerge.default)(config, file.webpackConfig);
      }
    }

    return config;
  }

}

exports.CreateWebpackConfig = CreateWebpackConfig;